{"ast":null,"code":"/*\n * FilePondPluginImagePreview 4.0.3\n * Licensed under MIT, https://opensource.org/licenses/MIT\n * Please visit https://pqina.nl/filepond for details.\n */\n\n/* eslint-disable */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.FilePondPluginImagePreview = factory();\n})(this, function () {\n  'use strict'; // test if file is of type image and can be viewed in canvas\n\n  var isPreviewableImage = function isPreviewableImage(file) {\n    return /^image/.test(file.type);\n  };\n\n  var cloneCanvas = function cloneCanvas(origin, target) {\n    target = target || document.createElement('canvas');\n    target.width = origin.width;\n    target.height = origin.height;\n    var ctx = target.getContext('2d');\n    ctx.drawImage(origin, 0, 0);\n    return target;\n  };\n\n  var IMAGE_SCALE_SPRING_PROPS = {\n    type: 'spring',\n    stiffness: 0.5,\n    damping: 0.45,\n    mass: 10\n  };\n\n  var createVector = function createVector(x, y) {\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  var vectorDot = function vectorDot(a, b) {\n    return a.x * b.x + a.y * b.y;\n  };\n\n  var vectorSubtract = function vectorSubtract(a, b) {\n    return createVector(a.x - b.x, a.y - b.y);\n  };\n\n  var vectorDistanceSquared = function vectorDistanceSquared(a, b) {\n    return vectorDot(vectorSubtract(a, b), vectorSubtract(a, b));\n  };\n\n  var vectorDistance = function vectorDistance(a, b) {\n    return Math.sqrt(vectorDistanceSquared(a, b));\n  };\n\n  var getOffsetPointOnEdge = function getOffsetPointOnEdge(length, rotation) {\n    var a = length;\n    var A = 1.5707963267948966;\n    var B = rotation;\n    var C = 1.5707963267948966 - rotation;\n    var sinA = Math.sin(A);\n    var sinB = Math.sin(B);\n    var sinC = Math.sin(C);\n    var cosC = Math.cos(C);\n    var ratio = a / sinA;\n    var b = ratio * sinB;\n    var c = ratio * sinC;\n    return createVector(cosC * b, cosC * c);\n  };\n\n  var getRotatedRectSize = function getRotatedRectSize(rect, rotation) {\n    var w = rect.width;\n    var h = rect.height;\n    var hor = getOffsetPointOnEdge(w, rotation);\n    var ver = getOffsetPointOnEdge(h, rotation);\n    var tl = createVector(rect.x + Math.abs(hor.x), rect.y - Math.abs(hor.y));\n    var tr = createVector(rect.x + rect.width + Math.abs(ver.y), rect.y + Math.abs(ver.x));\n    var bl = createVector(rect.x - Math.abs(ver.y), rect.y + rect.height - Math.abs(ver.x));\n    return {\n      width: vectorDistance(tl, tr),\n      height: vectorDistance(tl, bl)\n    };\n  };\n\n  var getImageRectZoomFactor = function getImageRectZoomFactor(imageRect, cropRect, rotation, center) {\n    // calculate available space round image center position\n    var cx = center.x > 0.5 ? 1 - center.x : center.x;\n    var cy = center.y > 0.5 ? 1 - center.y : center.y;\n    var imageWidth = cx * 2 * imageRect.width;\n    var imageHeight = cy * 2 * imageRect.height; // calculate rotated crop rectangle size\n\n    var rotatedCropSize = getRotatedRectSize(cropRect, rotation); // calculate scalar required to fit image\n\n    return Math.max(rotatedCropSize.width / imageWidth, rotatedCropSize.height / imageHeight);\n  };\n\n  var getCenteredCropRect = function getCenteredCropRect(container, aspectRatio) {\n    var width = container.width;\n    var height = width * aspectRatio;\n\n    if (height > container.height) {\n      height = container.height;\n      width = height / aspectRatio;\n    }\n\n    var x = (container.width - width) * 0.5;\n    var y = (container.height - height) * 0.5;\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    };\n  }; // does horizontal and vertical flipping\n\n\n  var createBitmapView = function createBitmapView(_) {\n    return _.utils.createView({\n      name: 'image-bitmap',\n      tag: 'canvas',\n      ignoreRect: true,\n      mixins: {\n        styles: ['scaleX', 'scaleY']\n      },\n      create: function create(_ref) {\n        var root = _ref.root,\n            props = _ref.props;\n        cloneCanvas(props.image, root.element);\n      }\n    });\n  }; // shifts and rotates image\n\n\n  var createImageCanvasWrapper = function createImageCanvasWrapper(_) {\n    return _.utils.createView({\n      name: 'image-canvas-wrapper',\n      tag: 'div',\n      ignoreRect: true,\n      mixins: {\n        apis: ['crop', 'width', 'height'],\n        styles: ['originX', 'originY', 'translateX', 'translateY', 'scaleX', 'scaleY', 'rotateZ'],\n        animations: {\n          originX: IMAGE_SCALE_SPRING_PROPS,\n          originY: IMAGE_SCALE_SPRING_PROPS,\n          scaleX: IMAGE_SCALE_SPRING_PROPS,\n          scaleY: IMAGE_SCALE_SPRING_PROPS,\n          translateX: IMAGE_SCALE_SPRING_PROPS,\n          translateY: IMAGE_SCALE_SPRING_PROPS,\n          rotateZ: IMAGE_SCALE_SPRING_PROPS\n        }\n      },\n      create: function create(_ref2) {\n        var root = _ref2.root,\n            props = _ref2.props;\n        props.width = props.image.width;\n        props.height = props.image.height;\n        root.ref.image = root.appendChildView(root.createChildView(createBitmapView(_), {\n          image: props.image\n        }));\n      },\n      write: function write(_ref3) {\n        var root = _ref3.root,\n            props = _ref3.props;\n        var flip = props.crop.flip;\n        var image = root.ref.image;\n        image.scaleX = flip.horizontal ? -1 : 1;\n        image.scaleY = flip.vertical ? -1 : 1;\n      }\n    });\n  }; // clips canvas to correct aspect ratio\n\n\n  var createClipView = function createClipView(_) {\n    return _.utils.createView({\n      name: 'image-clip',\n      tag: 'div',\n      ignoreRect: true,\n      mixins: {\n        apis: ['crop', 'width', 'height'],\n        styles: ['width', 'height', 'opacity'],\n        animations: {\n          opacity: {\n            type: 'tween',\n            duration: 250\n          }\n        }\n      },\n      create: function create(_ref4) {\n        var root = _ref4.root,\n            props = _ref4.props;\n        root.ref.image = root.appendChildView(root.createChildView(createImageCanvasWrapper(_), Object.assign({}, props))); // set up transparency grid\n\n        var transparencyIndicator = root.query('GET_IMAGE_PREVIEW_TRANSPARENCY_INDICATOR');\n\n        if (transparencyIndicator === null) {\n          return;\n        } // grid pattern\n\n\n        if (transparencyIndicator === 'grid') {\n          root.element.dataset.transparencyIndicator = transparencyIndicator;\n        } else {\n          // basic color\n          root.element.dataset.transparencyIndicator = 'color';\n        }\n      },\n      write: function write(_ref5) {\n        var root = _ref5.root,\n            props = _ref5.props,\n            shouldOptimize = _ref5.shouldOptimize;\n        var crop = props.crop,\n            width = props.width,\n            height = props.height;\n        root.ref.image.crop = crop;\n        var stage = {\n          x: 0,\n          y: 0,\n          width: width,\n          height: height,\n          center: {\n            x: width * 0.5,\n            y: height * 0.5\n          }\n        };\n        var image = {\n          width: root.ref.image.width,\n          height: root.ref.image.height\n        };\n        var origin = {\n          x: crop.center.x * image.width,\n          y: crop.center.y * image.height\n        };\n        var translation = {\n          x: stage.center.x - image.width * crop.center.x,\n          y: stage.center.y - image.height * crop.center.y\n        };\n        var rotation = Math.PI * 2 + crop.rotation % (Math.PI * 2);\n        var cropAspectRatio = crop.aspectRatio || image.height / image.width;\n        var stageZoomFactor = getImageRectZoomFactor(image, getCenteredCropRect(stage, cropAspectRatio), rotation, crop.center);\n        var scale = crop.zoom * stageZoomFactor;\n        var imageView = root.ref.image; // don't update clip layout\n\n        if (shouldOptimize) {\n          imageView.originX = null;\n          imageView.originY = null;\n          imageView.translateX = null;\n          imageView.translateY = null;\n          imageView.rotateZ = null;\n          imageView.scaleX = null;\n          imageView.scaleY = null;\n          return;\n        }\n\n        imageView.originX = origin.x;\n        imageView.originY = origin.y;\n        imageView.translateX = translation.x;\n        imageView.translateY = translation.y;\n        imageView.rotateZ = rotation;\n        imageView.scaleX = scale;\n        imageView.scaleY = scale;\n      }\n    });\n  };\n\n  var createImageView = function createImageView(_) {\n    return _.utils.createView({\n      name: 'image-preview',\n      tag: 'div',\n      ignoreRect: true,\n      mixins: {\n        apis: ['crop'],\n        styles: ['translateY', 'scaleX', 'scaleY', 'opacity'],\n        animations: {\n          scaleX: IMAGE_SCALE_SPRING_PROPS,\n          scaleY: IMAGE_SCALE_SPRING_PROPS,\n          translateY: IMAGE_SCALE_SPRING_PROPS,\n          opacity: {\n            type: 'tween',\n            duration: 400\n          }\n        }\n      },\n      create: function create(_ref6) {\n        var root = _ref6.root,\n            props = _ref6.props;\n        root.ref.clip = root.appendChildView(root.createChildView(createClipView(_), {\n          image: props.image,\n          crop: props.crop\n        }));\n      },\n      write: function write(_ref7) {\n        var root = _ref7.root,\n            props = _ref7.props,\n            shouldOptimize = _ref7.shouldOptimize;\n        var clip = root.ref.clip;\n        var crop = props.crop,\n            image = props.image;\n        clip.crop = crop; // don't update clip layout\n\n        clip.opacity = shouldOptimize ? 0 : 1;\n\n        if (shouldOptimize) {\n          return;\n        } // calculate scaled preview image size\n\n\n        var imageAspectRatio = image.height / image.width;\n        var aspectRatio = crop.aspectRatio || imageAspectRatio; // calculate container size\n\n        var containerWidth = root.rect.inner.width;\n        var containerHeight = root.rect.inner.height;\n        var fixedPreviewHeight = root.query('GET_IMAGE_PREVIEW_HEIGHT');\n        var minPreviewHeight = root.query('GET_IMAGE_PREVIEW_MIN_HEIGHT');\n        var maxPreviewHeight = root.query('GET_IMAGE_PREVIEW_MAX_HEIGHT');\n        var panelAspectRatio = root.query('GET_PANEL_ASPECT_RATIO');\n        var allowMultiple = root.query('GET_ALLOW_MULTIPLE');\n\n        if (panelAspectRatio && !allowMultiple) {\n          fixedPreviewHeight = containerWidth * panelAspectRatio;\n          aspectRatio = panelAspectRatio;\n        } // determine clip width and height\n\n\n        var clipHeight = fixedPreviewHeight !== null ? fixedPreviewHeight : Math.max(minPreviewHeight, Math.min(containerWidth * aspectRatio, maxPreviewHeight));\n        var clipWidth = clipHeight / aspectRatio;\n\n        if (clipWidth > containerWidth) {\n          clipWidth = containerWidth;\n          clipHeight = clipWidth * aspectRatio;\n        }\n\n        if (clipHeight > containerHeight) {\n          clipHeight = containerHeight;\n          clipWidth = containerHeight / aspectRatio;\n        }\n\n        clip.width = clipWidth;\n        clip.height = clipHeight;\n      }\n    });\n  };\n\n  var SVG_MASK = '<svg width=\"500\" height=\"200\" viewBox=\"0 0 500 200\" preserveAspectRatio=\"none\">\\n    <defs>\\n        <radialGradient id=\"gradient-__UID__\" cx=\".5\" cy=\"1.25\" r=\"1.15\">\\n            <stop offset=\\'50%\\' stop-color=\\'#000000\\'/>\\n            <stop offset=\\'56%\\' stop-color=\\'#0a0a0a\\'/>\\n            <stop offset=\\'63%\\' stop-color=\\'#262626\\'/>\\n            <stop offset=\\'69%\\' stop-color=\\'#4f4f4f\\'/>\\n            <stop offset=\\'75%\\' stop-color=\\'#808080\\'/>\\n            <stop offset=\\'81%\\' stop-color=\\'#b1b1b1\\'/>\\n            <stop offset=\\'88%\\' stop-color=\\'#dadada\\'/>\\n            <stop offset=\\'94%\\' stop-color=\\'#f6f6f6\\'/>\\n            <stop offset=\\'100%\\' stop-color=\\'#ffffff\\'/>\\n        </radialGradient>\\n        <mask id=\"mask-__UID__\">\\n            <rect x=\"0\" y=\"0\" width=\"500\" height=\"200\" fill=\"url(#gradient-__UID__)\"></rect>\\n        </mask>\\n    </defs>\\n    <rect x=\"0\" width=\"500\" height=\"200\" fill=\"currentColor\" mask=\"url(#mask-__UID__)\"></rect>\\n</svg>';\n  var checkedMyBases = false;\n  var SVGMaskUniqueId = 0;\n\n  var createImageOverlayView = function createImageOverlayView(fpAPI) {\n    return fpAPI.utils.createView({\n      name: 'image-preview-overlay',\n      tag: 'div',\n      ignoreRect: true,\n      create: function create(_ref) {\n        var root = _ref.root,\n            props = _ref.props;\n\n        if (!checkedMyBases && document.querySelector('base')) {\n          SVG_MASK = SVG_MASK.replace(/url\\(\\#/g, 'url(' + window.location.href.replace(window.location.hash, '') + '#');\n          checkedMyBases = true;\n        }\n\n        SVGMaskUniqueId++;\n        root.element.classList.add('filepond--image-preview-overlay-' + props.status);\n        root.element.innerHTML = SVG_MASK.replace(/__UID__/g, SVGMaskUniqueId);\n      },\n      mixins: {\n        styles: ['opacity'],\n        animations: {\n          opacity: {\n            type: 'spring',\n            mass: 25\n          }\n        }\n      }\n    });\n  };\n  /**\n   * Bitmap Worker\n   */\n\n\n  var BitmapWorker = function BitmapWorker() {\n    self.onmessage = function (e) {\n      createImageBitmap(e.data.message.file).then(function (bitmap) {\n        self.postMessage({\n          id: e.data.id,\n          message: bitmap\n        }, [bitmap]);\n      });\n    };\n  };\n\n  var getImageSize = function getImageSize(url, cb) {\n    var image = new Image();\n\n    image.onload = function () {\n      var width = image.naturalWidth;\n      var height = image.naturalHeight;\n      image = null;\n      cb(width, height);\n    };\n\n    image.src = url;\n  };\n\n  var toConsumableArray = function toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  };\n\n  var transforms = {\n    1: function _() {\n      return [1, 0, 0, 1, 0, 0];\n    },\n    2: function _(width) {\n      return [-1, 0, 0, 1, width, 0];\n    },\n    3: function _(width, height) {\n      return [-1, 0, 0, -1, width, height];\n    },\n    4: function _(width, height) {\n      return [1, 0, 0, -1, 0, height];\n    },\n    5: function _() {\n      return [0, 1, 1, 0, 0, 0];\n    },\n    6: function _(width, height) {\n      return [0, 1, -1, 0, height, 0];\n    },\n    7: function _(width, height) {\n      return [0, -1, -1, 0, height, width];\n    },\n    8: function _(width) {\n      return [0, -1, 1, 0, 0, width];\n    }\n  };\n\n  var fixImageOrientation = function fixImageOrientation(ctx, width, height, orientation) {\n    // no orientation supplied\n    if (orientation === -1) {\n      return;\n    }\n\n    ctx.transform.apply(ctx, toConsumableArray(transforms[orientation](width, height)));\n  }; // draws the preview image to canvas\n\n\n  var createPreviewImage = function createPreviewImage(data, width, height, orientation) {\n    // can't draw on half pixels\n    width = Math.round(width);\n    height = Math.round(height); // draw image\n\n    var canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    var ctx = canvas.getContext('2d'); // if is rotated incorrectly swap width and height\n\n    if (orientation >= 5 && orientation <= 8) {\n      var _ref = [height, width];\n      width = _ref[0];\n      height = _ref[1];\n    } // correct image orientation\n\n\n    fixImageOrientation(ctx, width, height, orientation); // draw the image\n\n    ctx.drawImage(data, 0, 0, width, height);\n    return canvas;\n  };\n\n  var isBitmap = function isBitmap(file) {\n    return /^image/.test(file.type) && !/svg/.test(file.type);\n  };\n\n  var MAX_WIDTH = 10;\n  var MAX_HEIGHT = 10;\n\n  var calculateAverageColor = function calculateAverageColor(image) {\n    var scalar = Math.min(MAX_WIDTH / image.width, MAX_HEIGHT / image.height);\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    var width = canvas.width = Math.ceil(image.width * scalar);\n    var height = canvas.height = Math.ceil(image.height * scalar);\n    ctx.drawImage(image, 0, 0, width, height);\n    var data = null;\n\n    try {\n      data = ctx.getImageData(0, 0, width, height).data;\n    } catch (e) {\n      return null;\n    }\n\n    var l = data.length;\n    var r = 0;\n    var g = 0;\n    var b = 0;\n    var i = 0;\n\n    for (; i < l; i += 4) {\n      r += data[i] * data[i];\n      g += data[i + 1] * data[i + 1];\n      b += data[i + 2] * data[i + 2];\n    }\n\n    r = averageColor(r, l);\n    g = averageColor(g, l);\n    b = averageColor(b, l);\n    return {\n      r: r,\n      g: g,\n      b: b\n    };\n  };\n\n  var averageColor = function averageColor(c, l) {\n    return Math.floor(Math.sqrt(c / (l / 4)));\n  };\n\n  var loadImage = function loadImage(url) {\n    return new Promise(function (resolve, reject) {\n      var img = new Image();\n      img.crossOrigin = 'Anonymous';\n\n      img.onload = function () {\n        resolve(img);\n      };\n\n      img.onerror = function (e) {\n        reject(e);\n      };\n\n      img.src = url;\n    });\n  };\n\n  var createImageWrapperView = function createImageWrapperView(_) {\n    // create overlay view\n    var overlay = createImageOverlayView(_);\n\n    var removeImageView = function removeImageView(root, imageView) {\n      root.removeChildView(imageView);\n\n      imageView._destroy();\n    }; // remove an image\n\n\n    var shiftImage = function shiftImage(_ref) {\n      var root = _ref.root;\n      var image = root.ref.images.shift();\n      image.opacity = 0;\n      image.translateY = -15;\n      root.ref.imageViewBin.push(image);\n    };\n\n    var ImageView = createImageView(_); // add new image\n\n    var pushImage = function pushImage(_ref2) {\n      var root = _ref2.root,\n          props = _ref2.props;\n      var id = props.id;\n      var item = root.query('GET_ITEM', {\n        id: id\n      });\n      if (!item) return;\n      var image = props.preview;\n      var crop = item.getMetadata('crop') || {\n        center: {\n          x: 0.5,\n          y: 0.5\n        },\n        flip: {\n          horizontal: false,\n          vertical: false\n        },\n        zoom: 1,\n        rotation: 0,\n        aspectRatio: null\n      }; // append image presenter\n\n      var imageView = root.appendChildView(root.createChildView(ImageView, {\n        image: image,\n        crop: crop,\n        opacity: 0,\n        scaleX: 1.15,\n        scaleY: 1.15,\n        translateY: 15\n      }), root.childViews.length);\n      root.ref.images.push(imageView); // reveal\n\n      imageView.opacity = 1;\n      imageView.scaleX = 1;\n      imageView.scaleY = 1;\n      imageView.translateY = 0; // the preview is now ready to be drawn\n\n      setTimeout(function () {\n        root.dispatch('DID_IMAGE_PREVIEW_SHOW', {\n          id: id\n        });\n      }, 250);\n    };\n\n    var updateImage = function updateImage(_ref3) {\n      var root = _ref3.root,\n          props = _ref3.props;\n      var item = root.query('GET_ITEM', {\n        id: props.id\n      });\n      if (!item) return;\n      var imageView = root.ref.images[root.ref.images.length - 1];\n      imageView.crop = item.getMetadata('crop');\n    }; // replace image preview\n\n\n    var didUpdateItemMetadata = function didUpdateItemMetadata(_ref4) {\n      var root = _ref4.root,\n          props = _ref4.props,\n          action = _ref4.action;\n\n      if (action.change.key !== 'crop' || !root.ref.images.length) {\n        return;\n      }\n\n      var item = root.query('GET_ITEM', {\n        id: props.id\n      });\n      if (!item) return;\n      var crop = item.getMetadata('crop');\n      var image = root.ref.images[root.ref.images.length - 1]; // if aspect ratio has changed, we need to create a new image\n\n      if (Math.abs(crop.aspectRatio - image.crop.aspectRatio) > 0.00001) {\n        shiftImage({\n          root: root\n        });\n        pushImage({\n          root: root,\n          props: props\n        });\n      } else {\n        // if not, we can update the current image\n        updateImage({\n          root: root,\n          props: props\n        });\n      }\n    };\n\n    var canCreateImageBitmap = function canCreateImageBitmap(file) {\n      return 'createImageBitmap' in window && isBitmap(file);\n    };\n    /**\n     * Write handler for when preview container has been created\n     */\n\n\n    var didCreatePreviewContainer = function didCreatePreviewContainer(_ref5) {\n      var root = _ref5.root,\n          props = _ref5.props;\n      var id = props.id; // we need to get the file data to determine the eventual image size\n\n      var item = root.query('GET_ITEM', id);\n      if (!item) return; // get url to file (we'll revoke it later on when done)\n\n      var fileURL = URL.createObjectURL(item.file); // determine image size of this item\n\n      getImageSize(fileURL, function (width, height) {\n        // we can now scale the panel to the final size\n        root.dispatch('DID_IMAGE_PREVIEW_CALCULATE_SIZE', {\n          id: id,\n          width: width,\n          height: height\n        });\n      });\n    };\n\n    var drawPreview = function drawPreview(_ref6) {\n      var root = _ref6.root,\n          props = _ref6.props;\n      var utils = _.utils;\n      var createWorker = utils.createWorker;\n      var id = props.id; // we need to get the file data to determine the eventual image size\n\n      var item = root.query('GET_ITEM', id);\n      if (!item) return; // get url to file (we'll revoke it later on when done)\n\n      var fileURL = URL.createObjectURL(item.file); // fallback\n\n      var loadPreviewFallback = function loadPreviewFallback() {\n        // let's scale the image in the main thread :(\n        loadImage(fileURL).then(previewImageLoaded);\n      }; // image is now ready\n\n\n      var previewImageLoaded = function previewImageLoaded(data) {\n        // the file url is no longer needed\n        URL.revokeObjectURL(fileURL); // draw the scaled down version here and use that as source so bitmapdata can be closed\n        // orientation info\n\n        var exif = item.getMetadata('exif') || {};\n        var orientation = exif.orientation || -1; // get width and height from action, and swap if orientation is incorrect\n\n        var width = data.width,\n            height = data.height;\n\n        if (orientation >= 5 && orientation <= 8) {\n          var _ref7 = [height, width];\n          width = _ref7[0];\n          height = _ref7[1];\n        } // scale canvas based on pixel density\n\n\n        var pixelDensityFactor = window.devicePixelRatio; // calculate scaled preview image size\n\n        var previewImageRatio = height / width; // calculate image preview height and width\n\n        var previewContainerWidth = root.rect.element.width;\n        var previewContainerHeight = root.rect.element.height;\n        var imageWidth = 0;\n        var imageHeight = 0;\n        imageWidth = previewContainerWidth;\n        imageHeight = imageWidth * previewImageRatio;\n\n        if (previewImageRatio > 1) {\n          imageWidth = previewContainerWidth;\n          imageHeight = imageWidth * previewImageRatio;\n        } else {\n          imageHeight = previewContainerHeight;\n          imageWidth = imageHeight / previewImageRatio;\n        } // we want as much pixels to work with as possible,\n        // this multiplies the minimum image resolution\n\n\n        var resolutionScaleFactor = 4; // transfer to image tag so no canvas memory wasted on iOS\n\n        props.preview = createPreviewImage(data, Math.min(width, imageWidth * pixelDensityFactor * resolutionScaleFactor), Math.min(height, imageHeight * pixelDensityFactor * resolutionScaleFactor), orientation); // calculate average image color, disabled for now\n\n        var averageColor = root.query('GET_IMAGE_PREVIEW_CALCULATE_AVERAGE_IMAGE_COLOR') ? calculateAverageColor(data) : null;\n        item.setMetadata('color', averageColor, true); // data has been transferred to canvas ( if was ImageBitmap )\n\n        if ('close' in data) {\n          data.close();\n        } // show the overlay\n\n\n        root.ref.overlayShadow.opacity = 1; // create the first image\n\n        pushImage({\n          root: root,\n          props: props\n        });\n      }; // if we support scaling using createImageBitmap we use a worker\n\n\n      if (canCreateImageBitmap(item.file)) {\n        // let's scale the image in a worker\n        var worker = createWorker(BitmapWorker);\n        worker.post({\n          file: item.file\n        }, function (imageBitmap) {\n          // destroy worker\n          worker.terminate(); // no bitmap returned, must be something wrong,\n          // try the oldschool way\n\n          if (!imageBitmap) {\n            loadPreviewFallback();\n            return;\n          } // yay we got our bitmap, let's continue showing the preview\n\n\n          previewImageLoaded(imageBitmap);\n        });\n      } else {\n        // create fallback preview\n        loadPreviewFallback();\n      }\n    };\n    /**\n     * Write handler for when the preview image is ready to be animated\n     */\n\n\n    var didDrawPreview = function didDrawPreview(_ref8) {\n      var root = _ref8.root; // get last added image\n\n      var image = root.ref.images[root.ref.images.length - 1];\n      image.translateY = 0;\n      image.scaleX = 1.0;\n      image.scaleY = 1.0;\n      image.opacity = 1;\n    };\n    /**\n     * Write handler for when the preview has been loaded\n     */\n\n\n    var restoreOverlay = function restoreOverlay(_ref9) {\n      var root = _ref9.root;\n      root.ref.overlayShadow.opacity = 1;\n      root.ref.overlayError.opacity = 0;\n      root.ref.overlaySuccess.opacity = 0;\n    };\n\n    var didThrowError = function didThrowError(_ref10) {\n      var root = _ref10.root;\n      root.ref.overlayShadow.opacity = 0.25;\n      root.ref.overlayError.opacity = 1;\n    };\n\n    var didCompleteProcessing = function didCompleteProcessing(_ref11) {\n      var root = _ref11.root;\n      root.ref.overlayShadow.opacity = 0.25;\n      root.ref.overlaySuccess.opacity = 1;\n    };\n    /**\n     * Constructor\n     */\n\n\n    var create = function create(_ref12) {\n      var root = _ref12.root; // image view\n\n      root.ref.images = []; // image bin\n\n      root.ref.imageViewBin = []; // image overlays\n\n      root.ref.overlayShadow = root.appendChildView(root.createChildView(overlay, {\n        opacity: 0,\n        status: 'idle'\n      }));\n      root.ref.overlaySuccess = root.appendChildView(root.createChildView(overlay, {\n        opacity: 0,\n        status: 'success'\n      }));\n      root.ref.overlayError = root.appendChildView(root.createChildView(overlay, {\n        opacity: 0,\n        status: 'failure'\n      }));\n    };\n\n    return _.utils.createView({\n      name: 'image-preview-wrapper',\n      create: create,\n      styles: ['height'],\n      apis: ['height'],\n      write: _.utils.createRoute({\n        // image preview stated\n        DID_IMAGE_PREVIEW_DRAW: didDrawPreview,\n        DID_IMAGE_PREVIEW_CONTAINER_CREATE: didCreatePreviewContainer,\n        DID_FINISH_CALCULATE_PREVIEWSIZE: drawPreview,\n        DID_UPDATE_ITEM_METADATA: didUpdateItemMetadata,\n        // file states\n        DID_THROW_ITEM_LOAD_ERROR: didThrowError,\n        DID_THROW_ITEM_PROCESSING_ERROR: didThrowError,\n        DID_THROW_ITEM_INVALID: didThrowError,\n        DID_COMPLETE_ITEM_PROCESSING: didCompleteProcessing,\n        DID_START_ITEM_PROCESSING: restoreOverlay,\n        DID_REVERT_ITEM_PROCESSING: restoreOverlay\n      }, function (_ref13) {\n        var root = _ref13.root; // views on death row\n\n        var viewsToRemove = root.ref.imageViewBin.filter(function (imageView) {\n          return imageView.opacity === 0;\n        }); // views to retain\n\n        root.ref.imageViewBin = root.ref.imageViewBin.filter(function (imageView) {\n          return imageView.opacity > 0;\n        }); // remove these views\n\n        viewsToRemove.forEach(function (imageView) {\n          return removeImageView(root, imageView);\n        });\n        viewsToRemove.length = 0;\n      })\n    });\n  };\n  /**\n   * Image Preview Plugin\n   */\n\n\n  var plugin$1 = function plugin$1(fpAPI) {\n    var addFilter = fpAPI.addFilter,\n        utils = fpAPI.utils;\n    var Type = utils.Type,\n        createRoute = utils.createRoute,\n        isFile = utils.isFile; // imagePreviewView\n\n    var imagePreviewView = createImageWrapperView(fpAPI); // called for each view that is created right after the 'create' method\n\n    addFilter('CREATE_VIEW', function (viewAPI) {\n      // get reference to created view\n      var is = viewAPI.is,\n          view = viewAPI.view,\n          query = viewAPI.query; // only hook up to item view and only if is enabled for this cropper\n\n      if (!is('file') || !query('GET_ALLOW_IMAGE_PREVIEW')) {\n        return;\n      } // create the image preview plugin, but only do so if the item is an image\n\n\n      var didLoadItem = function didLoadItem(_ref) {\n        var root = _ref.root,\n            props = _ref.props;\n        var id = props.id;\n        var item = query('GET_ITEM', id); // item could theoretically have been removed in the mean time\n\n        if (!item || !isFile(item.file) || item.archived) return; // get the file object\n\n        var file = item.file; // exit if this is not an image\n\n        if (!isPreviewableImage(file)) return; // exit if image size is too high and no createImageBitmap support\n        // this would simply bring the browser to its knees and that is not what we want\n\n        var supportsCreateImageBitmap = 'createImageBitmap' in (window || {});\n        var maxPreviewFileSize = query('GET_IMAGE_PREVIEW_MAX_FILE_SIZE');\n        if (!supportsCreateImageBitmap && maxPreviewFileSize && file.size > maxPreviewFileSize) return; // set preview view\n\n        root.ref.imagePreview = view.appendChildView(view.createChildView(imagePreviewView, {\n          id: id\n        })); // update height if is fixed\n\n        var fixedPreviewHeight = root.query('GET_IMAGE_PREVIEW_HEIGHT');\n\n        if (fixedPreviewHeight) {\n          root.dispatch('DID_UPDATE_PANEL_HEIGHT', {\n            id: item.id,\n            height: fixedPreviewHeight\n          });\n        } // now ready\n\n\n        var queue = !supportsCreateImageBitmap && file.size > query('GET_IMAGE_PREVIEW_MAX_INSTANT_PREVIEW_FILE_SIZE');\n        root.dispatch('DID_IMAGE_PREVIEW_CONTAINER_CREATE', {\n          id: id\n        }, queue);\n      };\n\n      var rescaleItem = function rescaleItem(root, props) {\n        if (!root.ref.imagePreview) return;\n        var id = props.id; // get item\n\n        var item = root.query('GET_ITEM', {\n          id: id\n        });\n        if (!item) return; // if is fixed height or panel has aspect ratio, exit here, height has already been defined\n\n        var panelAspectRatio = root.query('GET_PANEL_ASPECT_RATIO');\n        var itemPanelAspectRatio = root.query('GET_ITEM_PANEL_ASPECT_RATIO');\n        var fixedHeight = root.query('GET_IMAGE_PREVIEW_HEIGHT');\n        if (panelAspectRatio || itemPanelAspectRatio || fixedHeight) return; // no data!\n\n        var _root$ref = root.ref,\n            imageWidth = _root$ref.imageWidth,\n            imageHeight = _root$ref.imageHeight;\n        if (!imageWidth || !imageHeight) return; // get height min and max\n\n        var minPreviewHeight = root.query('GET_IMAGE_PREVIEW_MIN_HEIGHT');\n        var maxPreviewHeight = root.query('GET_IMAGE_PREVIEW_MAX_HEIGHT'); // orientation info\n\n        var exif = item.getMetadata('exif') || {};\n        var orientation = exif.orientation || -1; // get width and height from action, and swap of orientation is incorrect\n\n        if (orientation >= 5 && orientation <= 8) {\n          var _ref2 = [imageHeight, imageWidth];\n          imageWidth = _ref2[0];\n          imageHeight = _ref2[1];\n        } // scale up width and height when we're dealing with an SVG\n\n\n        if (!isBitmap(item.file)) {\n          var scalar = 2048 / imageWidth;\n          imageWidth *= scalar;\n          imageHeight *= scalar;\n        } // image aspect ratio\n\n\n        var imageAspectRatio = imageHeight / imageWidth; // we need the item to get to the crop size\n\n        var previewAspectRatio = (item.getMetadata('crop') || {}).aspectRatio || imageAspectRatio; // preview height range\n\n        var previewHeightMax = Math.max(minPreviewHeight, Math.min(imageHeight, maxPreviewHeight));\n        var itemWidth = root.rect.element.width;\n        var previewHeight = Math.min(itemWidth * previewAspectRatio, previewHeightMax); // request update to panel height\n\n        root.dispatch('DID_UPDATE_PANEL_HEIGHT', {\n          id: item.id,\n          height: previewHeight\n        });\n      };\n\n      var didResizeView = function didResizeView(_ref3) {\n        var root = _ref3.root,\n            props = _ref3.props;\n        rescaleItem(root, props);\n      };\n\n      var didUpdateItemMetadata = function didUpdateItemMetadata(_ref4) {\n        var root = _ref4.root,\n            props = _ref4.props,\n            action = _ref4.action;\n        if (action.change.key !== 'crop') return;\n        rescaleItem(root, props);\n      };\n\n      var didCalculatePreviewSize = function didCalculatePreviewSize(_ref5) {\n        var root = _ref5.root,\n            props = _ref5.props,\n            action = _ref5.action; // remember dimensions\n\n        root.ref.imageWidth = action.width;\n        root.ref.imageHeight = action.height; // let's scale the preview pane\n\n        rescaleItem(root, props); // queue till next frame so we're sure the height has been applied this forces the draw image call inside the wrapper view to use the correct height\n\n        requestAnimationFrame(function () {\n          root.dispatch('DID_FINISH_CALCULATE_PREVIEWSIZE');\n        });\n      }; // start writing\n\n\n      view.registerWriter(createRoute({\n        DID_RESIZE_ROOT: didResizeView,\n        DID_STOP_RESIZE: didResizeView,\n        DID_LOAD_ITEM: didLoadItem,\n        DID_IMAGE_PREVIEW_CALCULATE_SIZE: didCalculatePreviewSize,\n        DID_UPDATE_ITEM_METADATA: didUpdateItemMetadata\n      }));\n    }); // expose plugin\n\n    return {\n      options: {\n        // Enable or disable image preview\n        allowImagePreview: [true, Type.BOOLEAN],\n        // Fixed preview height\n        imagePreviewHeight: [null, Type.INT],\n        // Min image height\n        imagePreviewMinHeight: [44, Type.INT],\n        // Max image height\n        imagePreviewMaxHeight: [256, Type.INT],\n        // Max size of preview file for when createImageBitmap is not supported\n        imagePreviewMaxFileSize: [null, Type.INT],\n        // Max size of preview file that we allow to try to instant preview if createImageBitmap is not supported, else image is queued for loading\n        imagePreviewMaxInstantPreviewFileSize: [1000000, Type.INT],\n        // Style of the transparancy indicator used behind images\n        imagePreviewTransparencyIndicator: [null, Type.STRING],\n        // Enables or disables reading average image color\n        imagePreviewCalculateAverageImageColor: [false, Type.BOOLEAN]\n      }\n    };\n  };\n\n  var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n\n  if (isBrowser) {\n    document.dispatchEvent(new CustomEvent('FilePond:pluginloaded', {\n      detail: plugin$1\n    }));\n  }\n\n  return plugin$1;\n});","map":null,"metadata":{},"sourceType":"script"}