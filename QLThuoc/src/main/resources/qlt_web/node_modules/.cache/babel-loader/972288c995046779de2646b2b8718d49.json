{"ast":null,"code":"\"use strict\";\n\nvar ultimate_pagination_utils_1 = require(\"./ultimate-pagination-utils\");\n\nvar ultimate_pagination_item_factories_1 = require(\"./ultimate-pagination-item-factories\");\n\nfunction getPaginationModel(options) {\n  if (options == null) {\n    throw new Error('getPaginationModel(): options object should be a passed');\n  }\n\n  var totalPages = Number(options.totalPages);\n\n  if (isNaN(totalPages)) {\n    throw new Error('getPaginationModel(): totalPages should be a number');\n  }\n\n  if (totalPages < 0) {\n    throw new Error('getPaginationModel(): totalPages shouldn\\'t be a negative number');\n  }\n\n  var currentPage = Number(options.currentPage);\n\n  if (isNaN(currentPage)) {\n    throw new Error('getPaginationModel(): currentPage should be a number');\n  }\n\n  if (currentPage < 0) {\n    throw new Error('getPaginationModel(): currentPage shouldn\\'t be a negative number');\n  }\n\n  if (currentPage > totalPages) {\n    throw new Error('getPaginationModel(): currentPage shouldn\\'t be greater than totalPages');\n  }\n\n  var boundaryPagesRange = options.boundaryPagesRange == null ? 1 : Number(options.boundaryPagesRange);\n\n  if (isNaN(boundaryPagesRange)) {\n    throw new Error('getPaginationModel(): boundaryPagesRange should be a number');\n  }\n\n  if (boundaryPagesRange < 0) {\n    throw new Error('getPaginationModel(): boundaryPagesRange shouldn\\'t be a negative number');\n  }\n\n  var siblingPagesRange = options.siblingPagesRange == null ? 1 : Number(options.siblingPagesRange);\n\n  if (isNaN(siblingPagesRange)) {\n    throw new Error('getPaginationModel(): siblingPagesRange should be a number');\n  }\n\n  if (siblingPagesRange < 0) {\n    throw new Error('getPaginationModel(): siblingPagesRange shouldn\\'t be a negative number');\n  }\n\n  var hidePreviousAndNextPageLinks = Boolean(options.hidePreviousAndNextPageLinks);\n  var hideFirstAndLastPageLinks = Boolean(options.hideFirstAndLastPageLinks);\n  var hideEllipsis = Boolean(options.hideEllipsis);\n  var ellipsisSize = hideEllipsis ? 0 : 1;\n  var paginationModel = [];\n  var createPage = ultimate_pagination_item_factories_1.createPageFunctionFactory(options);\n\n  if (!hideFirstAndLastPageLinks) {\n    paginationModel.push(ultimate_pagination_item_factories_1.createFirstPageLink(options));\n  }\n\n  if (!hidePreviousAndNextPageLinks) {\n    paginationModel.push(ultimate_pagination_item_factories_1.createPreviousPageLink(options));\n  } // Simplify generation of pages if number of available items is equal or greater than total pages to show\n\n\n  if (1 + 2 * ellipsisSize + 2 * siblingPagesRange + 2 * boundaryPagesRange >= totalPages) {\n    var allPages = ultimate_pagination_utils_1.createRange(1, totalPages).map(createPage);\n    paginationModel.push.apply(paginationModel, allPages);\n  } else {\n    // Calculate group of first pages\n    var firstPagesStart = 1;\n    var firstPagesEnd = boundaryPagesRange;\n    var firstPages = ultimate_pagination_utils_1.createRange(firstPagesStart, firstPagesEnd).map(createPage); // Calculate group of last pages\n\n    var lastPagesStart = totalPages + 1 - boundaryPagesRange;\n    var lastPagesEnd = totalPages;\n    var lastPages = ultimate_pagination_utils_1.createRange(lastPagesStart, lastPagesEnd).map(createPage); // Calculate group of main pages\n\n    var mainPagesStart = Math.min(Math.max(currentPage - siblingPagesRange, firstPagesEnd + ellipsisSize + 1), lastPagesStart - ellipsisSize - 2 * siblingPagesRange - 1);\n    var mainPagesEnd = mainPagesStart + 2 * siblingPagesRange;\n    var mainPages = ultimate_pagination_utils_1.createRange(mainPagesStart, mainPagesEnd).map(createPage); // Add group of first pages\n\n    paginationModel.push.apply(paginationModel, firstPages);\n\n    if (!hideEllipsis) {\n      // Calculate and add ellipsis before group of main pages\n      var firstEllipsisPageNumber = mainPagesStart - 1;\n      var showPageInsteadOfFirstEllipsis = firstEllipsisPageNumber === firstPagesEnd + 1;\n      var createFirstEllipsisOrPage = showPageInsteadOfFirstEllipsis ? createPage : ultimate_pagination_item_factories_1.createFirstEllipsis;\n      var firstEllipsis = createFirstEllipsisOrPage(firstEllipsisPageNumber);\n      paginationModel.push(firstEllipsis);\n    } // Add group of main pages\n\n\n    paginationModel.push.apply(paginationModel, mainPages);\n\n    if (!hideEllipsis) {\n      // Calculate and add ellipsis after group of main pages\n      var secondEllipsisPageNumber = mainPagesEnd + 1;\n      var showPageInsteadOfSecondEllipsis = secondEllipsisPageNumber === lastPagesStart - 1;\n      var createSecondEllipsisOrPage = showPageInsteadOfSecondEllipsis ? createPage : ultimate_pagination_item_factories_1.createSecondEllipsis;\n      var secondEllipsis = createSecondEllipsisOrPage(secondEllipsisPageNumber);\n      paginationModel.push(secondEllipsis);\n    } // Add group of last pages\n\n\n    paginationModel.push.apply(paginationModel, lastPages);\n  }\n\n  if (!hidePreviousAndNextPageLinks) {\n    paginationModel.push(ultimate_pagination_item_factories_1.createNextPageLink(options));\n  }\n\n  if (!hideFirstAndLastPageLinks) {\n    paginationModel.push(ultimate_pagination_item_factories_1.createLastPageLink(options));\n  }\n\n  return paginationModel;\n}\n\nexports.getPaginationModel = getPaginationModel;\n\nvar ultimate_pagination_constants_1 = require(\"./ultimate-pagination-constants\");\n\nexports.ITEM_TYPES = ultimate_pagination_constants_1.ITEM_TYPES;\nexports.ITEM_KEYS = ultimate_pagination_constants_1.ITEM_KEYS;","map":null,"metadata":{},"sourceType":"script"}