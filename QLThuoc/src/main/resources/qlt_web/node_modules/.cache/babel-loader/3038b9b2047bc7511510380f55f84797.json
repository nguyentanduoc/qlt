{"ast":null,"code":"import _objectSpread from \"D:\\\\LV\\\\qlt\\\\qlt_web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { ACTION_TYPES } from '../constants';\nimport _ from 'lodash';\nvar initState = {\n  errors: \"\",\n  authentication: {},\n  isLogin: false,\n  nav: [],\n  user: {},\n  authorities: [],\n  isChooseBranch: false,\n  branch: {},\n  branches: [],\n  isLoading: false\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ACTION_TYPES.AUTH.LOGIN_SUCCESS:\n      var payload = action.payload;\n\n      if (payload.branchs && payload.branchs.length > 1) {\n        return _objectSpread({}, state, {\n          authentication: payload.authentication,\n          isLogin: true,\n          nav: payload.nav,\n          user: payload.user,\n          authorities: payload.authorities,\n          isChooseBranch: true,\n          branches: payload.branches\n        });\n      } else {\n        var navs = navBranch(payload.nav, payload.branches[0]);\n        return _objectSpread({}, state, {\n          authentication: payload.authentication,\n          isLogin: true,\n          nav: navs,\n          user: payload.user,\n          authorities: payload.authorities,\n          isChooseBranch: false,\n          branch: payload.branches[0]\n        });\n      }\n\n    case ACTION_TYPES.AUTH.SET_BRANCH:\n      var nav = navBranch(payload.nav, action.payload);\n      return _objectSpread({}, state, {\n        branch: action.payload,\n        nav: nav\n      });\n\n    case ACTION_TYPES.AUTH.LOGOUT:\n      return initState;\n\n    case ACTION_TYPES.AUTH.SET_LOADING:\n      return _objectSpread({}, state, {\n        isLoading: !state.isLoading\n      });\n\n    default:\n      return state;\n  }\n});\n\nvar navBranch = function navBranch(navs, branch) {\n  navs.forEach(function (element) {\n    _.remove(element.children, function (nav) {\n      if (nav.isMain) {\n        if (!branch.isMain) {\n          return nav;\n        }\n      } else {// if(branch.isMain){\n        //   return nav;\n        // }\n      }\n    });\n  });\n};","map":{"version":3,"sources":["D:\\LV\\qlt\\qlt_web\\src\\reducers\\authReducer.js"],"names":["ACTION_TYPES","_","initState","errors","authentication","isLogin","nav","user","authorities","isChooseBranch","branch","branches","isLoading","state","action","type","AUTH","LOGIN_SUCCESS","payload","branchs","length","navs","navBranch","SET_BRANCH","LOGOUT","SET_LOADING","forEach","element","remove","children","isMain"],"mappings":"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","sourcesContent":["import {ACTION_TYPES} from '../constants';\nimport _ from 'lodash';\nconst initState  = {\n  errors:\"\",\n  authentication:{},\n  isLogin: false,\n  nav:[],\n  user: {},\n  authorities: [],\n  isChooseBranch: false,\n  branch:{},\n  branches:[],\n  isLoading: false\n};\nexport default (state = initState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.AUTH.LOGIN_SUCCESS:\n      const payload = action.payload;\n      if(payload.branchs && payload.branchs.length > 1) {\n          return {...state, \n            authentication: payload.authentication, \n            isLogin: true, \n            nav: payload.nav, \n            user: payload.user,\n            authorities: payload.authorities,\n            isChooseBranch: true,\n            branches: payload.branches\n          };\n        } else {\n          const navs = navBranch(payload.nav, payload.branches[0]);\n          return {...state, \n            authentication: payload.authentication,\n            isLogin: true, \n            nav: navs,\n            user: payload.user,\n            authorities: payload.authorities,\n            isChooseBranch: false,\n            branch: payload.branches[0]\n          };\n        }\n\n    case ACTION_TYPES.AUTH.SET_BRANCH:\n      const nav = navBranch(payload.nav, action.payload);\n      return {...state, branch: action.payload, nav: nav}\n    \n    case ACTION_TYPES.AUTH.LOGOUT:\n      return initState;\n\n    case ACTION_TYPES.AUTH.SET_LOADING:\n      return {...state, isLoading: !state.isLoading};\n\n    default:\n      return state;\n  }\n}\nconst navBranch = (navs, branch) => {\n\n  navs.forEach(element => {\n    _.remove(element.children, function(nav) {\n      if(nav.isMain) {\n        if(!branch.isMain){\n          return nav;\n        }\n      } else {\n        // if(branch.isMain){\n        //   return nav;\n        // }\n      }\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}