{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\LV\\\\qlt\\\\qlt_web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\LV\\\\qlt\\\\qlt_web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { NAV_ACTION_TYPE, NAV_API, ACTION_TYPES } from '../constants';\nimport axios from 'axios';\nimport { header } from '../helpers/headerHelper';\nimport { showAlertFail, showAlertAndReset } from '../actions/alertAction';\nexport var getAllNav = function getAllNav() {\n  var config = {\n    headers: header()\n  };\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return axios.post(NAV_API.GET_ALL_NAV, null, config);\n\n              case 3:\n                res = _context.sent;\n                dispatch(getAllNavSuccess(res.data));\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (_context.t0 && _context.t0.response && _context.t0.response.data && _context.t0.response.data.message) {\n                  dispatch(getAllNavFail(_context.t0.response.data.message));\n                } else {\n                  dispatch(getAllNavFail(_context.t0.toString()));\n                }\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var getAllSubNav = function getAllSubNav(id) {\n  var config = {\n    headers: header()\n  };\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return axios.post(NAV_API.GET_ALL_SUB_NAV, id, config);\n\n              case 3:\n                res = _context2.sent;\n                dispatch(getAllSubNavSuccess(res.data));\n                _context2.next = 10;\n                break;\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n\n                if (_context2.t0 && _context2.t0.response && _context2.t0.response.data && _context2.t0.response.data.message) {\n                  dispatch(getAllNavFail(_context2.t0.response.data.message));\n                } else {\n                  dispatch(getAllNavFail(_context2.t0.toString()));\n                }\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 7]]);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var updateNav = function updateNav(nav) {\n  var config = {\n    headers: header()\n  };\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return axios.post(NAV_API.UPDATE_NAV, nav, config);\n\n              case 3:\n                res = _context3.sent;\n                dispatch(showAlertAndReset(\"Cập nhật thành công\"));\n                dispatch(updateSuccess(res.data));\n                _context3.next = 11;\n                break;\n\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](0);\n\n                if (_context3.t0 && _context3.t0.response && _context3.t0.response.data && _context3.t0.response.data.message) {\n                  dispatch(showAlertFail(_context3.t0.response.data.message));\n                  dispatch(updateNavFail(_context3.t0.response.data.message));\n                } else {\n                  dispatch(showAlertFail(_context3.t0.toString()));\n                  dispatch(updateNavFail(_context3.t0.toString()));\n                }\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 8]]);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var setNav = function setNav(nav) {\n  return {\n    type: NAV_ACTION_TYPE.SET_NAV,\n    payload: nav\n  };\n};\nexport var setRoleForNav = function setRoleForNav(roles) {\n  return {\n    type: NAV_ACTION_TYPE.SET_ROLE_FOR_NAV,\n    payload: roles\n  };\n};\nexport var getAllNavSuccess = function getAllNavSuccess(data) {\n  return {\n    type: NAV_ACTION_TYPE.GET_ALL_NAV_SUCCESS,\n    payload: data\n  };\n};\nexport var getAllNavFail = function getAllNavFail(err) {\n  return {\n    type: ACTION_TYPES.HAS_ERROR,\n    payload: err\n  };\n};\nexport var getAllSubNavSuccess = function getAllSubNavSuccess(data) {\n  return {\n    type: NAV_ACTION_TYPE.GET_ALL_SUB_NAV,\n    payload: data\n  };\n};\nexport var updateSuccess = function updateSuccess(data) {\n  return {\n    type: NAV_ACTION_TYPE.UPDATE_SUCCESS,\n    payload: data\n  };\n};\nexport var updateNavFail = function updateNavFail(err) {\n  return {\n    type: ACTION_TYPES.HAS_ERROR,\n    payload: err\n  };\n};\nexport var resetAllNav = function resetAllNav() {\n  return {\n    type: NAV_ACTION_TYPE.RESET_ALL\n  };\n};","map":{"version":3,"sources":["D:\\LV\\qlt\\qlt_web\\src\\actions\\NavAction.js"],"names":["NAV_ACTION_TYPE","NAV_API","ACTION_TYPES","axios","header","showAlertFail","showAlertAndReset","getAllNav","config","headers","dispatch","post","GET_ALL_NAV","res","getAllNavSuccess","data","response","message","getAllNavFail","toString","getAllSubNav","id","GET_ALL_SUB_NAV","getAllSubNavSuccess","updateNav","nav","UPDATE_NAV","updateSuccess","updateNavFail","setNav","type","SET_NAV","payload","setRoleForNav","roles","SET_ROLE_FOR_NAV","GET_ALL_NAV_SUCCESS","err","HAS_ERROR","UPDATE_SUCCESS","resetAllNav","RESET_ALL"],"mappings":"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","sourcesContent":["import { NAV_ACTION_TYPE, NAV_API, ACTION_TYPES } from '../constants';\r\nimport axios from 'axios';\r\nimport { header } from '../helpers/headerHelper';\r\nimport {showAlertFail, showAlertAndReset} from '../actions/alertAction';\r\n\r\nexport const getAllNav = () => {\r\n    let config = {\r\n        headers: header()\r\n    };\r\n    return async (dispatch) => {\r\n        try {\r\n            const res = await axios.post(NAV_API.GET_ALL_NAV, null, config);\r\n            dispatch(getAllNavSuccess(res.data));\r\n        } catch (err) {\r\n            if (err && err.response && err.response.data && err.response.data.message) {\r\n                dispatch(getAllNavFail(err.response.data.message));\r\n            } else {\r\n                dispatch(getAllNavFail(err.toString()));\r\n            }\r\n        }\r\n    }\r\n}\r\nexport const getAllSubNav = (id) => {\r\n    let config = {\r\n        headers: header()\r\n    };\r\n    return async (dispatch) => {\r\n        try {\r\n            const res = await axios.post(NAV_API.GET_ALL_SUB_NAV, id, config);\r\n            dispatch(getAllSubNavSuccess(res.data));\r\n        } catch (err) {\r\n            if (err && err.response && err.response.data && err.response.data.message) {\r\n                dispatch(getAllNavFail(err.response.data.message));\r\n            } else {\r\n                dispatch(getAllNavFail(err.toString()));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateNav = (nav) => {\r\n    let config = {\r\n        headers: header()\r\n    };\r\n    return async (dispatch) => {\r\n        try {\r\n            const res = await axios.post(NAV_API.UPDATE_NAV, nav, config);\r\n            dispatch(showAlertAndReset(\"Cập nhật thành công\"));\r\n            dispatch(updateSuccess(res.data));\r\n        } catch (err) {\r\n            if (err && err.response && err.response.data && err.response.data.message) {\r\n                dispatch(showAlertFail(err.response.data.message));\r\n                dispatch(updateNavFail(err.response.data.message));\r\n            } else {\r\n                dispatch(showAlertFail(err.toString()));\r\n                dispatch(updateNavFail(err.toString()));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const setNav = (nav) =>{\r\n    return {\r\n        type: NAV_ACTION_TYPE.SET_NAV,\r\n        payload: nav\r\n    }\r\n}\r\n\r\nexport const setRoleForNav = (roles) =>  {\r\n    return {\r\n        type: NAV_ACTION_TYPE.SET_ROLE_FOR_NAV,\r\n        payload: roles\r\n    }\r\n}\r\n\r\nexport const getAllNavSuccess = (data) => {\r\n    return {\r\n        type: NAV_ACTION_TYPE.GET_ALL_NAV_SUCCESS,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const getAllNavFail = (err) => {\r\n    return {\r\n        type: ACTION_TYPES.HAS_ERROR,\r\n        payload: err\r\n    }\r\n}\r\n\r\nexport const getAllSubNavSuccess = (data) => {\r\n    return {\r\n        type: NAV_ACTION_TYPE.GET_ALL_SUB_NAV,\r\n        payload: data\r\n    } \r\n}\r\nexport const updateSuccess = (data) => {\r\n    return {\r\n        type: NAV_ACTION_TYPE.UPDATE_SUCCESS,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const updateNavFail = (err) => {\r\n    return {\r\n        type: ACTION_TYPES.HAS_ERROR,\r\n        payload: err\r\n    }\r\n}\r\nexport const resetAllNav = () => {\r\n    return {\r\n        type: NAV_ACTION_TYPE.RESET_ALL\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}